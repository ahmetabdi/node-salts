{
  "author": {
    "name": "Amir Raminfar",
    "email": "findamir@gmail.com"
  },
  "name": "phantom",
  "description": "PhantomJS integration module for NodeJS",
  "homepage": "https://github.com/amir20/phantomjs-node",
  "version": "2.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/amir20/phantomjs-node.git"
  },
  "contributors": [
    {
      "name": "Amir Raminfar",
      "email": "findamir@gmail.com"
    }
  ],
  "keywords": [
    "phantom",
    "phantomjs",
    "driver"
  ],
  "main": "lib/index.js",
  "engines": {
    "node": ">=0.12"
  },
  "dependencies": {
    "linerstream": "^0.1.4",
    "phantomjs-prebuilt": "^2.1.4",
    "winston": "^2.2.0"
  },
  "devDependencies": {
    "babel-core": "^6.7.7",
    "babel-polyfill": "^6.5.0",
    "babel-preset-es2015": "^6.5.0",
    "del": "^2.2.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-eslint": "^2.0.0",
    "gulp-jasmine": "^2.2.1",
    "gulp-watch": "^4.3.5",
    "jasmine-co": "^1.1.0",
    "proxyquire": "^1.7.4"
  },
  "license": "ISC",
  "scripts": {
    "test": "gulp lint test",
    "prepublish": "gulp build"
  },
  "readme": "phantom - Fast NodeJS API for PhantomJS\n========\n[![NPM](https://nodei.co/npm/phantom.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/phantom/)\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Linux Build][travis-image]][travis-url]\n[![Dependencies][david-image]][david-url]\n[![slack][slack-image]][slack-url]\n\n\n## Super easy to use\n```js\nvar phantom = require('phantom');\n\nvar sitepage = null;\nvar phInstance = null;\nphantom.create()\n    .then(instance => {\n        phInstance = instance;\n        return instance.createPage();\n    })\n    .then(page => {\n        sitepage = page;\n        return page.open('https://stackoverflow.com/');\n    })\n    .then(status => {\n        console.log(status);\n        return sitepage.property('content');\n    })\n    .then(content => {\n        console.log(content);\n        sitepage.close();\n        phInstance.exit();\n    })\n    .catch(error => {\n        console.log(error);\n        phInstance.exit();\n    });\n```\n\nSee [examples](examples) folder for more ways to use this module.\n\n## Installation\n\n```bash\n$ npm install phantom --save\n```\n\n## How does it work?\n\n  [v1.0.x](//github.com/amir20/phantomjs-node/tree/v1) used to use `dnode` to communicate between nodejs and phantomjs. This approach raised a lot of security restrictions and did not work well when using `cluster` or `pm2`.\n\n  v2.0.x has been completely rewritten to use `sysin` and `sysout` pipes to communicate with the phantomjs process. It works out of the box with `cluster` and `pm2`. If you want to see the messages that are sent try adding `DEBUG=true` to your execution, ie. `DEBUG=true node path/to/test.js`. The new code is much cleaner and simpler. PhantomJS is started with `shim.js` which proxies all messages to the `page` or `phantom` object.\n\n## Migrating from 1.0.x\n\n  Version 2.0.x is not backward compatible with previous versions. Most notability, method calls do not take a callback function anymore. Since `node` supports `Promise`, each of the methods return a promise. Instead of writing `page.open(url, function(){})` you would have to write `page.open(url).then(function(){})`.\n\n  The API is much more consistent now. All properties can be read with `page.property(key)` and settings can be read with `page.setting(key)`. See below for more example.\n\n## `phantom` object API\n\nTo create a new instance of `phantom` use `phantom.create()` to return a `Promise` which should resolve to a `phantom` object. If you want add parameters to the phantomjs process you can do so by doing:\n\n```js\nvar phantom = require('phantom');\nphantom.create(['--ignore-ssl-errors=yes', '--load-images=no']).then(...)\n```\nTo create a new `page`, you have to call `createPage()`:\n\n```js\nvar phantom = require('phantom');\nphantom.create().then(function(ph) {\n    ph.createPage().then(function(page) {\n        // use page\n        ph.exit();\n    });\n});\n```\n\nMake sure to call `#exit()` on the phantom instance to kill the phantomjs process. Otherwise, the process will never exit.\n\n## `page` object API\n\n  The `page` object that is returned with `#createPage` is a proxy that sends all methods to `phantom`. Most method calls should be identical to PhantomJS API. You must remember that each method returns a `Promise`.\n\n### `page#setting`\n\n`page.settings` can be accessed via `page.setting(key)` or set via `page.setting(key, value)`. Here is an example to read `javascriptEnabled` property.\n\n```js\npage.setting('javascriptEnabled').then(function(value){\n    expect(value).toEqual(true);\n});\n```\n\n### `page#property`\n\n\n  Page properties can be read using the `#property(key)` method.\n\n  ```js\npage.property('plainText').then(function(content) {\n  console.log(content);\n});\n  ```\n\n  Page properties can be set using the `#property(key, value)` method.\n\n  ```js\npage.property('viewportSize', {width: 800, height: 600}).then(function() {  \n});\n  ```\nWhen setting values, using `then()` is optional. But beware that the next method to phantom will block until it is ready to accept a new message.\n\nYou can set events using `#property()` because they are property members of `page`.\n\n```js\npage.property('onResourceRequested', function(requestData, networkRequest) {\n    console.log(requestData.url);\n});\n```\nIt is important to understand that the function above executes in the PhantomJS process. PhantomJS does not share any memory or variables with node. So using closures in javascript to share any variables outside of the function is not possible. Variables can be passed to `#property` instead. So for example, let's say you wanted to pass `process.env.DEBUG` to `onResourceRequested` method above. You could do this by:\n\n```js\npage.property('onResourceRequested', function(requestData, networkRequest, debug) {\n    if(debug){\n      // do something with it\n    }\n}, process.env.DEBUG);\n```\nEven if it is possible to set the events using this way, we recommend you use `#on()` for events (see below).\n\n\nYou can return data to NodeJS by using `#createOutObject()`. This is a special object that let's you write data in PhantomJS and read it in NodeJS. Using the example above, data can be read by doing:\n\n```js\nvar outObj = phInstance.createOutObject();\noutObj.urls = [];\npage.property('onResourceRequested', function(requestData, networkRequest, out) {\n    out.urls.push(requestData.url);\n}, outObj);\n\n// after call to page.open()\noutObj.property('urls').then(function(urls){\n   console.log(urls);\n});\n\n```\n\n### `page#on`\n\nBy using `on(event, [runOnPhantom=false],listener, args*)`, you can listen to the events the events the page emits.\n\n```js\nvar urls = [];\n\npage.on('onResourceRequested', function (requestData, networkRequest) {\n    urls.push(requestData.url); // this would push the url into the urls array above\n    networkRequest.abort(); // This will fail, because the params are a serialized version of what was provided\n});\n\npage.load('http://google.com');\n```\nAs you see, using on you have access to the closure variables and all the node goodness using this function ans in contrast of setting and event with property, you can set as many events as you want.\n\nIf you want to register a listener to run in phantomjs runtime (and thus, be able to cancel the request lets say), you can make it by passing the optional param `runOnPhantom` as `true`;\n\n```js\nvar urls = [];\n\npage.on('onResourceRequested', true, function (requestData, networkRequest) {\n    urls.push(requestData.url); // now this wont work, because this function would exercute in phantom runtime and thus wont have acces to the closure.\n    networkRequest.abort(); // This would work, because you are accessing to the non serialized networkRequest.\n});\n\npage.load('http://google.com');\n```\nThe same as in property, you can pass additional params to the function in the same way, and even use the object created by `#createOutObject()`.\n\nYou cannot use `#property()` and `#on()` at the same time, because it would conflict. Property just sets the function in phantomjs, while `#on()` manages the event in a different way.\n\n### `page#off`\n\n`#of(event)` is usefull to remove all the event listeners set by `#on()` for ans specific event.\n\n### `page#evaluate`\n\nUsing `#evaluate()` is similar to passing a function above. For example, to return HTML of an element you can do:\n\n```js\npage.evaluate(function() {\n    return document.getElementById('foo').innerHTML;\n}).then(function(html){\n    console.log(html);\n});\n```\n\n### `page#evaluateJavaScript`\n\nEvaluate a function contained in a string. It is similar to `#evaluate()`, but the function can't take any arguments. This example does the same thing as the example of `#evaluate()`:\n\n```js\npage.evaluateJavaScript('function() { return document.getElementById(\\'foo\\').innerHTML; }').then(function(html){\n    console.log(html);\n});\n```\n\n### `page#switchToFrame`\n\nSwitch to the frame specified by a frame name or a frame position:\n\n```js\npage.switchToFrame(framePositionOrName).then(function() {\n    // now the context of `page` will be the iframe if frame name or position exists\n});\n```\n\n### `page#switchToMainFrame`\n\nSwitch to the main frame of the page:\n\n```js\npage.switchToMainFrame().then(function() {\n    // now the context of `page` will the main frame\n});\n```\n\n\n## Tests\n\n  To run the test suite, first install the dependencies, then run `npm test`:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## Contributing\n\n  This package is under development. Pull requests are welcomed. Please make sure tests are added for new functionalities and that your build does pass in TravisCI.\n\n## People\n\n  The current lead maintainer is [Amir Raminfar](https://github.com/amir20)\n\n  [List of all contributors](https://github.com/amir20/phantomjs-node/graphs/contributors)\n\n## License\n\n  [ISC](LICENSE.md)\n\n[npm-image]: https://img.shields.io/npm/v/phantom.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/phantom\n[downloads-image]: https://img.shields.io/npm/dm/phantom.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/phantom\n[travis-image]: https://img.shields.io/travis/amir20/phantomjs-node.svg?style=flat-square\n[travis-url]: https://travis-ci.org/amir20/phantomjs-node\n[david-image]: https://david-dm.org/amir20/phantomjs-node.svg?style=flat-square\n[david-url]: https://david-dm.org/amir20/phantomjs-node\n[slack-url]: https://phantomjs-node.herokuapp.com\n[slack-image]: https://phantomjs-node.herokuapp.com/badge.svg\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/amir20/phantomjs-node/issues"
  },
  "_id": "phantom@2.1.2",
  "dist": {
    "shasum": "50ca0fe369e92bcbd13669019578f622e1a43d56"
  },
  "_from": "phantom@",
  "_resolved": "https://registry.npmjs.org/phantom/-/phantom-2.1.2.tgz"
}
